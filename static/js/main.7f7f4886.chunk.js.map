{"version":3,"sources":["route/Root.js","route/FirstLink.js","App.js","serviceWorker.js","index.js"],"names":["Root","react_default","a","createElement","react_router_dom","to","Component","FirstLink","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","usertable","ip","fetch","server_url","res_","console","log","status","data_","json","map","user","key","id","username","ip_","fetchData","makeTable","usertable_","setState","updateData","e","document","getElementById","value","_this2","className","type","placeholder","onClick","_handlerButtonFetch","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAeeA,0LATb,OACCC,EAAAC,EAAAC,cAAA,0BACaF,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,cAAT,2BALeC,uCCqFJC,cApFd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,KAAM,GACNC,UAAW,UACXC,GAAI,IANaV,6OAUI,GACH,oCAEAW,MAAMC,4CAAnBC,SACNC,QAAQC,IAAIF,EAAKN,OACbM,EAAKG,OAAS,MAAQ,4CAClB,iBACFC,EAAQJ,EAAKK,yBAEZD,mIAGGA,GACV,OAAKA,EAGWA,EAAME,IAAI,SAAAC,GAAI,OAC7B5B,EAAAC,EAAAC,cAAA,OAAK2B,IAAKD,EAAKE,IAAKF,EAAKE,GAAK,KAAOF,EAAKG,YAHnC,8EASSC,2FACGrB,KAAKsB,UAAUD,iBAA7BP,kBACmBd,KAAKuB,UAAUT,UAAlCU,SAENb,QAAQC,IAAIY,GAEZxB,KAAKyB,SAAS,CACbnB,UAAWkB,mJAKZxB,KAAK0B,yDAGeC,GACpB3B,KAAK0B,WAAWE,SAASC,eAAe,YAAYC,wCAG3C,IAAAC,EAAA/B,KAIT,OAHAW,QAAQC,IAAI,YAIXvB,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,aACd3C,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,OACd3C,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,iBAAf,qBAID3C,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,OACd3C,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,OACd3C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KAAT,gBAGFJ,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,OACd3C,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,OACd3C,EAAAC,EAAAC,cAAA,SAAO4B,GAAG,WAAUc,KAAK,OAAOD,UAAU,eAAeE,YAAY,aACrE7C,EAAAC,EAAAC,cAAA,UAAQ0C,KAAK,SAASD,UAAU,2BAA2BG,QAAS,SAAAR,GAAC,OAAII,EAAKK,oBAAoBT,KAAlG,WAGFtC,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,OACd3C,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,OACbhC,KAAKI,MAAME,oBA7EMZ,aCoCT2C,mLA5BX,OACEhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACEjD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrD,IACjCC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAW9C,aANlCD,aCEEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASrB,SAASC,eAAe,SD2H3C,kBAAmBqB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7f7f4886.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Root extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\tHere's Root <br/>\r\n\t\t\t\t<Link to=\"/firstlink\">Go to FirstLink</Link>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Root;","import React, { Component } from 'react'\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass FirstLink extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tdata: '',\r\n\t\t\tusertable: 'loading',\r\n\t\t\tip: '',\r\n\t\t}\r\n\t}\r\n\r\n\tasync fetchData (ip_ = '') {\r\n\t\tconst server_url = 'http://1.235.153.95:8000';\r\n\t\t// const server_url = 'http://localhost:3500';\r\n\t\tconst res_ = await fetch(server_url + '/users');\r\n\t\tconsole.log(res_.state);\r\n\t\tif (res_.status / 100 !== 2)\r\n\t\t\treturn false;\r\n\t\tconst data_ = res_.json();\r\n\r\n\t\treturn data_;\r\n\t}\r\n\r\n\tmakeTable (data_) {\r\n\t\tif (!data_)\r\n\t\t\treturn [];\r\n\r\n\t\tconst result_ = data_.map(user =>\r\n\t\t\t<div key={user.id}>{user.id + \": \" + user.username}</div>\r\n\t\t);\r\n\r\n\t\treturn result_;\r\n\t}\r\n\r\n\tasync updateData (ip_) {\r\n\t\tconst data_ = await this.fetchData(ip_);\t\t\r\n\t\tconst usertable_ = await this.makeTable(data_);\r\n\r\n\t\tconsole.log(usertable_);\r\n\r\n\t\tthis.setState({\r\n\t\t\tusertable: usertable_\r\n\t\t})\r\n\t}\r\n\r\n\tcomponentDidMount () {\r\n\t\tthis.updateData();\r\n\t}\r\n\r\n\t_handlerButtonFetch (e) {\r\n\t\tthis.updateData(document.getElementById('input_ip').value);\r\n\t}\r\n\r\n\trender () {\r\n\t\tconsole.log(\"render()\");\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-auto ml-5\">\r\n\t\t\t\t\t\tHere's FirstLink\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t<Link to=\"/\">Go to Root</Link>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t<input id=\"input_ip\"type=\"text\" className=\"form-control\" placeholder=\"Input IP\" />\r\n\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-sm btn-secondary\" onClick={e => this._handlerButtonFetch(e)}>fetch</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t{this.state.usertable}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default FirstLink;","import React, { Component } from 'react';\n\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Root from './route/Root';\nimport FirstLink from './route/FirstLink';\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Root} />\n          <Route exact path=\"/firstlink\" component={FirstLink} />\n        </Switch>\n      </HashRouter>\n\n      // <div className=\"App\">\n      //   <header className=\"App-header\">\n      //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      //     <p>\n      //       Edit <code>src/App.js</code> and save to reload.\n      //     </p>\n      //     <a\n      //       className=\"App-link\"\n      //       href=\"https://reactjs.org\"\n      //       target=\"_blank\"\n      //       rel=\"noopener noreferrer\"\n      //     >\n      //       Learn React\n      //     </a>\n      //   </header>\n      // </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}